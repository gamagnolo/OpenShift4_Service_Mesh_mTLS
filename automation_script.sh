#!/bin/bash
#########################################################################
# Automation script
#########################################################################
# POINT OF START: Operators ElasticSearch, Jaeger, Kiali, Service Mesh installed
#########################################################################
#
#########################################################################
### ENV VARS ############################################################
#########################################################################
# OCP MASTER API <URL>:<PORT>
OCP_MASTER_API=$1
OCP_ADMIN_USER=$2
OCP_ADMIN_PWD=$3
# Application Project (namespace containing the apps on which to apply the MESH)
APPS_PROJECT=$4
# Service Mesh Project (namespace containing the Service Mesh Control Plane)
MESH_CONTROLPLANE=$5
# LOGIN OCP Cluster
oc login -u $OCP_ADMIN_USER -p $OCP_ADMIN_PWD $OCP_MASTER_API
# NEW PROJECT for apps
oc new-project $APPS_PROJECT --display-name="$APPS_PROJECT"
# DEPLOY application
oc apply -f https://raw.githubusercontent.com/istio/istio/1.4.0/samples/bookinfo/platform/kube/bookinfo.yaml -n $APPS_PROJECT
sleep 10
# INSTALL Service Mesh control plane
oc adm new-project $MESH_CONTROLPLANE --display-name="Service Mesh System"
oc apply -f resources/service-mesh.yaml -n $MESH_CONTROLPLANE
sleep 10
# INSTALL a ServiceMeshMemberRoll resource with $APPS_PROJECT as its only member
oc apply -f resources/service-mesh-roll.yaml -n $MESH_CONTROLPLANE
sleep 10
# MAKE sure that $APPS_PROJECT now includes the appropriate service mesh-related labels
./resources/check_MeshMember.sh
# ADD a service mesh data plane auto-injection annotation to $APPS_PROJECT deployments
./resources/inject_istio_annotation.sh
sleep 10
# MAKE sure that all $APPS_PROJECT deployments now include the Envoy sidecar proxy
./resources/check_AllSidecar.sh
# IF $APPS_PROJECT deployments have probes defined, you need to insert http-rewrite or command-based probes
# Make the productpage route reachable
oc patch deployment productpage-v1 -p '{"spec": {"template": {"metadata": {"labels": {"maistra.io/expose-route": "true"}}}}}' -n $APPS_PROJECT
sleep 10
# CONFIGURE mTLS for productpage service (route autogenerated)
oc apply -f resources/productpage-mtls-destinationrule.yml -n $APPS_PROJECT
oc create secret tls productpage-certs --cert resources/certificates/productpage-tls.crt --key resources/certificates/productpage-tls.key -n $MESH_CONTROLPLANE
oc create -f resources/productpage-gateway.yml -n $MESH_CONTROLPLANE
oc create -f resources/productpage-virtualservice.yml -n $APPS_PROJECT
sleep 10
# CONFIGURE mTLS for details service (no exposed outside of the cluster, so no Route/Gateway/VirtualService)
oc create -f resources/details-mtls-destinationrule.yml -n $APPS_PROJECT
sleep 10
# CONFIGURE mTLS for reviews service (no exposed outside of the cluster, so no Route/Gateway/VirtualService)
oc create -f resources/reviews-mtls-destinationrule.yml -n $APPS_PROJECT
sleep 10
# CONFIGURE mTLS for ratings service (no exposed outside of the cluster, so no Route/Gateway/VirtualService)
oc create -f resources/ratings-mtls-destinationrule.yml -n $APPS_PROJECT
sleep 10
# ENABLE Strict mTLS Policy
oc create -f resources/bookinfo-peerauthentication.yml -n $APPS_PROJECT
echo "Strict mTLS communication ENABLED"
echo "Access to the $APPS_PROJECT application by the following URL: https://productpage.apps.cluster-9d16.9d16.sandbox67.opentlc.com"
